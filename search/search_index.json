{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Principales comandos en Linux Apuntes del m\u00f3dulo de \"Implantaci\u00f3n de Sistemas Operativos\" 1\u00ba curso del CFGS \"Administraci\u00f3n de Sistemas Inform\u00e1ticos en Red\" Contenidos Script : Programaci\u00f3n de script Directorios : Gesti\u00f3n de archivos y directorios Aplicaciones : Programaci\u00f3n de script","title":"Inicio"},{"location":"#principales-comandos-en-linux","text":"Apuntes del m\u00f3dulo de \"Implantaci\u00f3n de Sistemas Operativos\" 1\u00ba curso del CFGS \"Administraci\u00f3n de Sistemas Inform\u00e1ticos en Red\"","title":" Principales comandos en Linux"},{"location":"#contenidos","text":"Script : Programaci\u00f3n de script Directorios : Gesti\u00f3n de archivos y directorios Aplicaciones : Programaci\u00f3n de script","title":"Contenidos "},{"location":"aplicaciones/","text":"DPKG Los archivos .deb, son ejecutables en Ubuntu(Debian) y permiten la instalaci\u00f3n del software elegido. Su instalaci\u00f3n es realizada mediante el comando dpkg dpkg [ opciones ] aplicaci\u00f3n Opciones Comando Acci\u00f3n dpkg -I agustinPrg.deb Nos muestra informaci\u00f3n del paquete \u201cagustinPrg\u201d dpkg -i agustinPrg.deb Instala el paquete \u201cagustinPrg\u201d dpkg -r agustinPrg Desinstala el paquete \u201cagustinPrg\u201d dpkg -S /usr/bin/agustinPrg Nos indica el propietario del fichero \"agustinPrg\" dpkg -L agustinPrg Muestra el listado de los ficheros que pertenecen al paquete \"agustinPrg\" dpkg -s agustinPrg Muestra el estado del paquete \"agustinPrg\" dpkg -c agustinPrg.deb Muestra los ficheros que contiene el paquete deb ANTES de instalarlo Repositorios Apt es una herramienta de administraci\u00f3n que encontraremos en todos los sistemas que est\u00e1n basados en Debian, es el que se encarga de buscar los paquetes que queremos instalar en los repositorios. Un ejemplo de uso de apt ser\u00eda: apt [ opciones ] aplicaci\u00f3n Opciones Comando Acci\u00f3n apt install nombre_paquete instalaci\u00f3n apt install --reinstall nombre_paquete re-instalaci\u00f3n apt remove nombre_paquete Desinstalaci\u00f3n apt update Actualizaci\u00f3n del cat\u00e1logo apt check Comprobar que no hay dependencias incumplidas apt - cache search patron B\u00fasqueda en el cat\u00e1logo apt-cache show nombre_paquete Mostrar informaci\u00f3n de un paquete apt-cache policy nombre_paquete Mostrar informaci\u00f3n acerca de las versiones apt full-upgrade Actualizar el sistema (completa) apt upgrade Actualizar el sistema (cobarde) apt autoremove Limpiar el sistema de paquetes innecesarios apt clean Limpiar el catalogo Compilando c\u00f3digo Generalmente las aplicaciones en c\u00f3digo fuente vienen en este formato .tar . Ser\u00e1 necesario su descompresi\u00f3n y desempaquetamiento para pasar al proceso de linkar o enlazar la librer\u00edas necesarias para el funcionamiento de la aplicaci\u00f3n y la compilaci\u00f3n de la aplicaci\u00f3n en ejecutable. make && make install tar El comando TAR es usado empaquetar (o comprimir si es indicado) un archivo o directorio: Opciones Comando Acci\u00f3n c Crea un paquete t Comprueba los archivos almacenador en paquete x Extrae los archivos que contiene el paquete v Muestra el proceso de empaquetamiento p Conserva los permisos de los ficheros r A\u00f1ade archivos al paquete f Especifica el nombre del paquete z Comprime o descomprime gzip La orden Gzip es un comando que permite comprimir. El nombre del archivo del archivo resultante se identifica con la extensi\u00f3n .gz y debe de ser descomprimido antes de ser usado Opciones gzip agustin.doc #Comprimir gzip -d agustin.doc.gz # Descomprimir, opci\u00f3n a gunzip agustin.doc.gz # Descomprimir, opci\u00f3n b Bzip2 Permite comprimir archivos. Comprime m\u00e1s que gzip (el algoritmo utilizado es m\u00e1s completo). La extensi\u00f3n que crea es .bz2 Opciones bgzip agustin.doc # Comprimir bgzip -d agustin.doc.bz2 # Descomprimir, opci\u00f3n a gunzip agustin.doc.bz2 # Descomprimir, opci\u00f3n b","title":"Aplicaciones"},{"location":"aplicaciones/#dpkg","text":"Los archivos .deb, son ejecutables en Ubuntu(Debian) y permiten la instalaci\u00f3n del software elegido. Su instalaci\u00f3n es realizada mediante el comando dpkg dpkg [ opciones ] aplicaci\u00f3n","title":"DPKG"},{"location":"aplicaciones/#opciones","text":"Comando Acci\u00f3n dpkg -I agustinPrg.deb Nos muestra informaci\u00f3n del paquete \u201cagustinPrg\u201d dpkg -i agustinPrg.deb Instala el paquete \u201cagustinPrg\u201d dpkg -r agustinPrg Desinstala el paquete \u201cagustinPrg\u201d dpkg -S /usr/bin/agustinPrg Nos indica el propietario del fichero \"agustinPrg\" dpkg -L agustinPrg Muestra el listado de los ficheros que pertenecen al paquete \"agustinPrg\" dpkg -s agustinPrg Muestra el estado del paquete \"agustinPrg\" dpkg -c agustinPrg.deb Muestra los ficheros que contiene el paquete deb ANTES de instalarlo","title":"Opciones"},{"location":"aplicaciones/#repositorios","text":"Apt es una herramienta de administraci\u00f3n que encontraremos en todos los sistemas que est\u00e1n basados en Debian, es el que se encarga de buscar los paquetes que queremos instalar en los repositorios. Un ejemplo de uso de apt ser\u00eda: apt [ opciones ] aplicaci\u00f3n","title":"Repositorios"},{"location":"aplicaciones/#opciones_1","text":"Comando Acci\u00f3n apt install nombre_paquete instalaci\u00f3n apt install --reinstall nombre_paquete re-instalaci\u00f3n apt remove nombre_paquete Desinstalaci\u00f3n apt update Actualizaci\u00f3n del cat\u00e1logo apt check Comprobar que no hay dependencias incumplidas apt - cache search patron B\u00fasqueda en el cat\u00e1logo apt-cache show nombre_paquete Mostrar informaci\u00f3n de un paquete apt-cache policy nombre_paquete Mostrar informaci\u00f3n acerca de las versiones apt full-upgrade Actualizar el sistema (completa) apt upgrade Actualizar el sistema (cobarde) apt autoremove Limpiar el sistema de paquetes innecesarios apt clean Limpiar el catalogo","title":"Opciones"},{"location":"aplicaciones/#compilando-codigo","text":"Generalmente las aplicaciones en c\u00f3digo fuente vienen en este formato .tar . Ser\u00e1 necesario su descompresi\u00f3n y desempaquetamiento para pasar al proceso de linkar o enlazar la librer\u00edas necesarias para el funcionamiento de la aplicaci\u00f3n y la compilaci\u00f3n de la aplicaci\u00f3n en ejecutable. make && make install","title":"Compilando c\u00f3digo"},{"location":"aplicaciones/#tar","text":"El comando TAR es usado empaquetar (o comprimir si es indicado) un archivo o directorio:","title":"tar"},{"location":"aplicaciones/#opciones_2","text":"Comando Acci\u00f3n c Crea un paquete t Comprueba los archivos almacenador en paquete x Extrae los archivos que contiene el paquete v Muestra el proceso de empaquetamiento p Conserva los permisos de los ficheros r A\u00f1ade archivos al paquete f Especifica el nombre del paquete z Comprime o descomprime","title":"Opciones"},{"location":"aplicaciones/#gzip","text":"La orden Gzip es un comando que permite comprimir. El nombre del archivo del archivo resultante se identifica con la extensi\u00f3n .gz y debe de ser descomprimido antes de ser usado","title":"gzip"},{"location":"aplicaciones/#opciones_3","text":"gzip agustin.doc #Comprimir gzip -d agustin.doc.gz # Descomprimir, opci\u00f3n a gunzip agustin.doc.gz # Descomprimir, opci\u00f3n b","title":"Opciones"},{"location":"aplicaciones/#bzip2","text":"Permite comprimir archivos. Comprime m\u00e1s que gzip (el algoritmo utilizado es m\u00e1s completo). La extensi\u00f3n que crea es .bz2","title":"Bzip2"},{"location":"aplicaciones/#opciones_4","text":"bgzip agustin.doc # Comprimir bgzip -d agustin.doc.bz2 # Descomprimir, opci\u00f3n a gunzip agustin.doc.bz2 # Descomprimir, opci\u00f3n b","title":"Opciones"},{"location":"directorios/","text":"LS Muestra informaci\u00f3n sobre ficheros y directorios. Sin par\u00e1metros muestra el directorio actual. ls [opciones] [argumentos] Opciones Opciones Descripci\u00f3n d Informaci\u00f3n del directorio, no del contenido a Muestra los archivos y directorios que comienzan por un punto (ocultos) l ** Informaci\u00f3n en formato largo i Muestra el n\u00famero de i-nodo del fichero t ** Informaci\u00f3n ordenada por d\u00eda y hora de creaci\u00f3n (de mayor a menor) r Informaci\u00f3n ordenada en orden inverso R Muestra los directorios por debajo del actual de forma recursiva Ejemplos ls -l /home/agustin ls -lr /home/agustin ls -ld /home/??ustin ls -ld /home/agus* PWD Muestra la ruta absoluta del directorio actual pwd [opciones] Ejemplos pwd TOUCH Actualiza la fecha de acceso y modificaci\u00f3n de ficheros. Si no existe, lo crea vac\u00edo. touch [opciones] [argumentos] Opciones Opciones Descripci\u00f3n c No crea ning\u00fan fichero Ejemplos touch /home/agustin/readme.md GREP El comando grep permite buscar las l\u00edneas que contienen una cadena de caracteres especificada mediante una expresi\u00f3n regular. grep [patron] fichero1 fichero2 .... Opciones Opciones Descripci\u00f3n c Escribir el n\u00famero de las l\u00edneas que satisfacen la condici\u00f3n l Escribir los nombre de los ficheros que contienen las l\u00edneas buscadas i No distinguir entre may\u00fasculas y min\u00fasculas n Cada l\u00ednea es precedida por su n\u00famero en el fichero s No se vuelcan los mensajes que indican que un fichero no se puede abrir v Muestra s\u00f3lo las l\u00edneas que no satisfacen el criterio de selecci\u00f3n r Busca recursivamente en el directorio E Expresiones regulares extendidas (ver egrep) F Usa listas de cadenas fijas en lugar de expresiones regulares. (Ver fgrep) Comodines Opciones Descripci\u00f3n ? Sustituye a un car\u00e1cter. * Sustituye a un conjunto de caracteres. ^ principio de l\u00ednea. $ final de l\u00ednea. Ejemplos grep unix01 /etc/passwd grep unix0 [ 1 -9 ] /etc/passwd grep '^c' misDatos.txt // L\u00edneas que empiecen por la letra c en el archivo misDatos.txt grep '^[^c]' misDatos.txt // L\u00edneas que NO comiencen por la letra c en el archivo grep \u2013v bash$ /etc/passwd // Mostrar las cuentas de usuario que NO utilicen bash ls -l /usr | grep '^d' // Lista subdirectorios de /usr ( que empiezan con 'd' ) ls -l / | grep '.......rw' // Listar archivos que otros pueden leer y escribir grep '^[^:]*::' /etc/passwd // Buscar usuarios sin contrase\u00f1a grep '^[^:]*:\\*:' /etc/passwd // Usuarios que no pueden entrar al sistema grep \u2018^d\u2019 fichero // L\u00edneas que empiecen por d en el fichero . grep \u2018^ [ ^d ] \u2019 fichero // L\u00edneas que no comienzan por d en el fichero grep \u2013v \u2018^C\u2019 fich1 > fich2 // Quita las l\u00edneas de fich1 que comienzan por C y copio en fich2 grep -E ':[0-9]{1,3}:' /etc/passwd // Lineas que tengan de 1 a 3 d\u00edgitos en alguno de sus campos entre \":\" FIND El comando find se utiliza para buscar el archivo dentro de una rama de directorios. Su estructura es la siguiente: find [ruta] expresion Opciones Opciones Descripci\u00f3n maxdepth Busca de forma recursiva hasta un m\u00e1ximo de N niveles de subdirectorios por debajo del especificado. - con -maxdepth 1 se busca en el directorio - Por defecto se busca en todos los subdirectorios print Visualiza el camino name Debe coincidir con el nombre iname Debe coincidir con el nombre, pero ignorando may\u00fasculas path Nombre con ruta completa type Tipo de fichero a buscar: - d \u2192 Directorio - f \u2192 Fichero regular - l \u2192 Enlace simb\u00f3lico - b \u2192 Fichero especial de bloques - c \u2192 Fichero especial de car\u00e1cteres size Con el numero de bloques de tama\u00f1o : + , - , sin_signo Tama\u00f1o de N unidades de espacio. Las unidades de espacio pueden ser: - b \u2192 bloques de 512 bytes - c \u2192 bytes - w \u2192 palabras (2 bytes) ) - k \u2192 KB - M \u2192 MB - G \u2192 GB empty Archivo vac\u00edo (regular o directorio) user Ficheros propiedad del usuario group Ficheros que pertenecen al grupo uid Archivo del usuario con UID gid Archivo del grupo con GID atime Tiempo transcurrido desde el \u00faltimo acceso (N*24 horas atr\u00e1s) +, - , sin_signo ctime Tiempo transcurrido desde la \u00faltima cambio de estado(N*24 horas atr\u00e1s) + \u2192 mayores que el valor - \u2192 menores que el valor sin signo \u2192 Exactamente el valor mtime Tiempo transcurrido desde la \u00faltima modificaci\u00f3n del archivo(N*24 horas atr\u00e1s) + , - , sin signo amin Tiempo transcurrido desde el \u00faltimo acceso (N minutos atr\u00e1s) +, - , sin_signo cmin Tiempo transcurrido desde la \u00faltima cambio de estado( N minutos atr\u00e1s) + , - , sin signo mmin Tiempo transcurrido desde la \u00faltima modificaci\u00f3n del archivo( N minutos atr\u00e1s) + , - , sin signo Acciones Opciones Descripci\u00f3n -exec COMANDO * {} * Ejecuta COMANDO sobre los archivos encontrados Ejemplos find /home -name buscame -print find /home -size +100 -print // Fichero con tama\u00f1o superior a 100 bloques find / -size +100M // Fichero con tama\u00f1o mayor a 100MB find / -mtime -7 // Fichero modificados la \u00faltima semana find /var/tmp -empty -exec rm {} \\; // Busca archivos vac\u00edos y los borra. find seguridad find -name \"*.txt\" -exec cat {} \\; // Muestra todos los archivos del directorio find /home/preparador \u2013name \"*.txt\" // Archivos .txt del directorio find /home/preparador \u2013name \"*.c\" \u2013size +100K // Archivos con extensi\u00f3n.c y tama\u00f1o mayor a 100KB find /home/preparador \u2013amin +2 \u2013amin -6 // Archivos le\u00eddos entre 2 y 6 minutos atr\u00e1s find -type -d -mtime +10 \u2013exec rm \u2013r {} \\; // Borrar subdirectorios con antig\u00fcedad mayor de 10 d\u00edas ; find / -name \"*.mp3\" \u2013exec cp {} /home/preparador/copiaMusica \\; CUT El comando cut se utiliza para poder cortar caracteres y campos, con la posibilidad de usar delimitadores y otras opciones, para extraer las partes seleccionadas. cut [opcion] [fichero] Opciones Opciones Descripci\u00f3n d Delimitador a utilizar f Seleccionar los campos indicados c Seleccionar caracteres por l\u00ednea b Seleccionar bytes por l\u00ednea Ejemplos echo \"foo,bar,baz,stuff,blah,oogabooga\" | cut -d ',' -f 3 ,6 // El resultado ser\u00eda: baz,oogabooga cut \u2013c-4 /etc/passwd // primeros 4 caracteres de cada l\u00ednea cut \u2013d: -f1,4 /etc/passwd // primer y cuarto campo SORT El comando sort se utiliza para ordenar las lineas de un fichero sort [opcion] [fichero] Opciones Opciones Descripci\u00f3n t Especificar separador k Ordenar especificando posiciones -kc\u2081.d\u2081 , c\u2082.d\u2082 c \u2192 numero de campo d \u2192 d\u00edgito dentro del campo u Eliminar filas repetidas (unique) f Sin distinci\u00f3n entre may\u00fasculas y min\u00fasculas. Ejemplos sort arch1 // Ordena archivo por orden alfab\u00e9tico sort -n arch2.num // Ordena num\u00e9ricamente. sort -k2 -t, alumnos.txt // Ordenar alumnos por el segundo campo ( delimitador , ) sort -t: -k1,3 f1.txt // Ordena por los campos 1 y 3 sort -t: -k1.3,3.5 f1.txt // Ordena desde el 3er. car\u00e1cter del campo 1 hasta el 5to. Car\u00e1cter del campo 3 . sort -nr f2.num // Ordena en orden num\u00e9rico descendente. sort -k3 f3.txt // Ordena alfab\u00e9ticamente por 3er. campo. los campos se delimitan por blancos ( espacio o tabulador ) . ls \u2013l | sort \u2013nr \u2013k5 // Ordenado de mayor a menor por tama\u00f1o de archivo","title":"Directorios"},{"location":"directorios/#ls","text":"Muestra informaci\u00f3n sobre ficheros y directorios. Sin par\u00e1metros muestra el directorio actual. ls [opciones] [argumentos]","title":"LS"},{"location":"directorios/#opciones","text":"Opciones Descripci\u00f3n d Informaci\u00f3n del directorio, no del contenido a Muestra los archivos y directorios que comienzan por un punto (ocultos) l ** Informaci\u00f3n en formato largo i Muestra el n\u00famero de i-nodo del fichero t ** Informaci\u00f3n ordenada por d\u00eda y hora de creaci\u00f3n (de mayor a menor) r Informaci\u00f3n ordenada en orden inverso R Muestra los directorios por debajo del actual de forma recursiva","title":"Opciones"},{"location":"directorios/#ejemplos","text":"ls -l /home/agustin ls -lr /home/agustin ls -ld /home/??ustin ls -ld /home/agus*","title":"Ejemplos"},{"location":"directorios/#pwd","text":"Muestra la ruta absoluta del directorio actual pwd [opciones]","title":"PWD"},{"location":"directorios/#ejemplos_1","text":"pwd","title":"Ejemplos"},{"location":"directorios/#touch","text":"Actualiza la fecha de acceso y modificaci\u00f3n de ficheros. Si no existe, lo crea vac\u00edo. touch [opciones] [argumentos]","title":"TOUCH"},{"location":"directorios/#opciones_1","text":"Opciones Descripci\u00f3n c No crea ning\u00fan fichero","title":"Opciones"},{"location":"directorios/#ejemplos_2","text":"touch /home/agustin/readme.md","title":"Ejemplos"},{"location":"directorios/#grep","text":"El comando grep permite buscar las l\u00edneas que contienen una cadena de caracteres especificada mediante una expresi\u00f3n regular. grep [patron] fichero1 fichero2 ....","title":"GREP"},{"location":"directorios/#opciones_2","text":"Opciones Descripci\u00f3n c Escribir el n\u00famero de las l\u00edneas que satisfacen la condici\u00f3n l Escribir los nombre de los ficheros que contienen las l\u00edneas buscadas i No distinguir entre may\u00fasculas y min\u00fasculas n Cada l\u00ednea es precedida por su n\u00famero en el fichero s No se vuelcan los mensajes que indican que un fichero no se puede abrir v Muestra s\u00f3lo las l\u00edneas que no satisfacen el criterio de selecci\u00f3n r Busca recursivamente en el directorio E Expresiones regulares extendidas (ver egrep) F Usa listas de cadenas fijas en lugar de expresiones regulares. (Ver fgrep)","title":"Opciones"},{"location":"directorios/#comodines","text":"Opciones Descripci\u00f3n ? Sustituye a un car\u00e1cter. * Sustituye a un conjunto de caracteres. ^ principio de l\u00ednea. $ final de l\u00ednea.","title":"Comodines"},{"location":"directorios/#ejemplos_3","text":"grep unix01 /etc/passwd grep unix0 [ 1 -9 ] /etc/passwd grep '^c' misDatos.txt // L\u00edneas que empiecen por la letra c en el archivo misDatos.txt grep '^[^c]' misDatos.txt // L\u00edneas que NO comiencen por la letra c en el archivo grep \u2013v bash$ /etc/passwd // Mostrar las cuentas de usuario que NO utilicen bash ls -l /usr | grep '^d' // Lista subdirectorios de /usr ( que empiezan con 'd' ) ls -l / | grep '.......rw' // Listar archivos que otros pueden leer y escribir grep '^[^:]*::' /etc/passwd // Buscar usuarios sin contrase\u00f1a grep '^[^:]*:\\*:' /etc/passwd // Usuarios que no pueden entrar al sistema grep \u2018^d\u2019 fichero // L\u00edneas que empiecen por d en el fichero . grep \u2018^ [ ^d ] \u2019 fichero // L\u00edneas que no comienzan por d en el fichero grep \u2013v \u2018^C\u2019 fich1 > fich2 // Quita las l\u00edneas de fich1 que comienzan por C y copio en fich2 grep -E ':[0-9]{1,3}:' /etc/passwd // Lineas que tengan de 1 a 3 d\u00edgitos en alguno de sus campos entre \":\"","title":"Ejemplos"},{"location":"directorios/#find","text":"El comando find se utiliza para buscar el archivo dentro de una rama de directorios. Su estructura es la siguiente: find [ruta] expresion","title":"FIND"},{"location":"directorios/#opciones_3","text":"Opciones Descripci\u00f3n maxdepth Busca de forma recursiva hasta un m\u00e1ximo de N niveles de subdirectorios por debajo del especificado. - con -maxdepth 1 se busca en el directorio - Por defecto se busca en todos los subdirectorios print Visualiza el camino name Debe coincidir con el nombre iname Debe coincidir con el nombre, pero ignorando may\u00fasculas path Nombre con ruta completa type Tipo de fichero a buscar: - d \u2192 Directorio - f \u2192 Fichero regular - l \u2192 Enlace simb\u00f3lico - b \u2192 Fichero especial de bloques - c \u2192 Fichero especial de car\u00e1cteres size Con el numero de bloques de tama\u00f1o : + , - , sin_signo Tama\u00f1o de N unidades de espacio. Las unidades de espacio pueden ser: - b \u2192 bloques de 512 bytes - c \u2192 bytes - w \u2192 palabras (2 bytes) ) - k \u2192 KB - M \u2192 MB - G \u2192 GB empty Archivo vac\u00edo (regular o directorio) user Ficheros propiedad del usuario group Ficheros que pertenecen al grupo uid Archivo del usuario con UID gid Archivo del grupo con GID atime Tiempo transcurrido desde el \u00faltimo acceso (N*24 horas atr\u00e1s) +, - , sin_signo ctime Tiempo transcurrido desde la \u00faltima cambio de estado(N*24 horas atr\u00e1s) + \u2192 mayores que el valor - \u2192 menores que el valor sin signo \u2192 Exactamente el valor mtime Tiempo transcurrido desde la \u00faltima modificaci\u00f3n del archivo(N*24 horas atr\u00e1s) + , - , sin signo amin Tiempo transcurrido desde el \u00faltimo acceso (N minutos atr\u00e1s) +, - , sin_signo cmin Tiempo transcurrido desde la \u00faltima cambio de estado( N minutos atr\u00e1s) + , - , sin signo mmin Tiempo transcurrido desde la \u00faltima modificaci\u00f3n del archivo( N minutos atr\u00e1s) + , - , sin signo","title":"Opciones"},{"location":"directorios/#acciones","text":"Opciones Descripci\u00f3n -exec COMANDO * {} * Ejecuta COMANDO sobre los archivos encontrados","title":"Acciones"},{"location":"directorios/#ejemplos_4","text":"find /home -name buscame -print find /home -size +100 -print // Fichero con tama\u00f1o superior a 100 bloques find / -size +100M // Fichero con tama\u00f1o mayor a 100MB find / -mtime -7 // Fichero modificados la \u00faltima semana find /var/tmp -empty -exec rm {} \\; // Busca archivos vac\u00edos y los borra. find seguridad find -name \"*.txt\" -exec cat {} \\; // Muestra todos los archivos del directorio find /home/preparador \u2013name \"*.txt\" // Archivos .txt del directorio find /home/preparador \u2013name \"*.c\" \u2013size +100K // Archivos con extensi\u00f3n.c y tama\u00f1o mayor a 100KB find /home/preparador \u2013amin +2 \u2013amin -6 // Archivos le\u00eddos entre 2 y 6 minutos atr\u00e1s find -type -d -mtime +10 \u2013exec rm \u2013r {} \\; // Borrar subdirectorios con antig\u00fcedad mayor de 10 d\u00edas ; find / -name \"*.mp3\" \u2013exec cp {} /home/preparador/copiaMusica \\;","title":"Ejemplos"},{"location":"directorios/#cut","text":"El comando cut se utiliza para poder cortar caracteres y campos, con la posibilidad de usar delimitadores y otras opciones, para extraer las partes seleccionadas. cut [opcion] [fichero]","title":"CUT"},{"location":"directorios/#opciones_4","text":"Opciones Descripci\u00f3n d Delimitador a utilizar f Seleccionar los campos indicados c Seleccionar caracteres por l\u00ednea b Seleccionar bytes por l\u00ednea","title":"Opciones"},{"location":"directorios/#ejemplos_5","text":"echo \"foo,bar,baz,stuff,blah,oogabooga\" | cut -d ',' -f 3 ,6 // El resultado ser\u00eda: baz,oogabooga cut \u2013c-4 /etc/passwd // primeros 4 caracteres de cada l\u00ednea cut \u2013d: -f1,4 /etc/passwd // primer y cuarto campo","title":"Ejemplos"},{"location":"directorios/#sort","text":"El comando sort se utiliza para ordenar las lineas de un fichero sort [opcion] [fichero]","title":"SORT"},{"location":"directorios/#opciones_5","text":"Opciones Descripci\u00f3n t Especificar separador k Ordenar especificando posiciones -kc\u2081.d\u2081 , c\u2082.d\u2082 c \u2192 numero de campo d \u2192 d\u00edgito dentro del campo u Eliminar filas repetidas (unique) f Sin distinci\u00f3n entre may\u00fasculas y min\u00fasculas.","title":"Opciones"},{"location":"directorios/#ejemplos_6","text":"sort arch1 // Ordena archivo por orden alfab\u00e9tico sort -n arch2.num // Ordena num\u00e9ricamente. sort -k2 -t, alumnos.txt // Ordenar alumnos por el segundo campo ( delimitador , ) sort -t: -k1,3 f1.txt // Ordena por los campos 1 y 3 sort -t: -k1.3,3.5 f1.txt // Ordena desde el 3er. car\u00e1cter del campo 1 hasta el 5to. Car\u00e1cter del campo 3 . sort -nr f2.num // Ordena en orden num\u00e9rico descendente. sort -k3 f3.txt // Ordena alfab\u00e9ticamente por 3er. campo. los campos se delimitan por blancos ( espacio o tabulador ) . ls \u2013l | sort \u2013nr \u2013k5 // Ordenado de mayor a menor por tama\u00f1o de archivo","title":"Ejemplos"},{"location":"script/","text":"INTERPRETE En la primera l\u00ednea del script se debe indicar que shell que vas a usar ( /bin/bash/ , /usr/bin/perl , etc ) Aunque da igual la que uses lo importante es el contenido: #!/bin/bash #! Se conoce con el nombre de Sha Bang. Se denomina \"sha-bang\" a la secuencia #! con la que se inician los scripts. Su funci\u00f3n es indicarle al sistema que se trata de un conjunto de comandos para que sean interpretados. En realidad, es un n\u00famero m\u00e1gico de dos bytes. El n\u00famero m\u00e1gico es un marcador especial para indicar el tipo de archivo, en este caso, indica que se trata de un script de shell ejecutable. Para introducir comentarios se debe poner #. Por cada linea que dese\u00e9is poner un comentario, lo primero que debe tener es #. Es importante a\u00f1adir comentarios comentando la utilidad del script o las variables que se crean. Ejecutar Antes de poder ejecutarlo, debemos darle permisos de ejecuci\u00f3n. (+x) por ello, haremos uso del comando chmod y damos permisos de ejecuci\u00f3n, si se desea, se pueden dar a todos los usuarios y grupos. chmod 755 /ruta_del_script \u2192 Para el usuario propietario chmod 777 /ruta_del_script \u2192 Para cualquier usuario Una vez hecho todo lo anterior, usaremos: ./nombredelscript.sh Variables Lo primero es saber c\u00f3mo dar valor a una variable. Es tan sencillo como poner: nombre_variable=valor Si deseas guardar la salida de un comando solo tienes que ponerlo entre tildes invertidas: nombre_variable= ` comando ` Tambien hay un comando que lee por teclado las variables ( read ). Para ponerlo es: read -p \"Introduce el nombre y los apellidos\" nombre apellidos Tiene un mont\u00f3n de opciones pero estas son las m\u00e1s importantes y usadas: Opci\u00f3n Descripci\u00f3n -p \"frase\" Muestra por pantalla una frase para saber que debes introducir -n num_car N\u00famero m\u00e1ximo de caracteres que puedes introducir por teclado Cuando queremos utilizar el valor de una variable en el c\u00f3digo, nos referiremos a \u00e9ste como: $nombre_variable Por lo tanto, si queremos mostrar el contenido de una variable podemos utilizar el comando echo echo $nombre_variable Parametros posicionales Son valores que se le pasan al script desde la l\u00ednea de comandos cuando se ejecuta y se numeran en orden. Pero a partir del 10 hay que encerrarlo entre llaves, ej. ${11} ./script valor1 valor2 ... valorN Para trabajar con los par\u00e1metros necesitar saber: Descripci\u00f3n $NumParametro Ver el contenido del par\u00e1metro $* Contenido de todos los par\u00e1metros $# N\u00famero de par\u00e1metros ESTRUCTURAS DE CONTROL if La estructura b\u00e1sica de una condici\u00f3n ser\u00eda: if condici\u00f3n then comando1 else comando2 fi En caso de necesitar if anidados: if condici\u00f3n then comando1 elif condici\u00f3n then comando2 elif condici\u00f3n then fi Ejemplo if [ $edad -gt 18 ] then echo \"Eres mayor de edad\" else echo \"No eres mayor de edad\" fi case funciona igual que los switch, esta estructura sirve para dependiendo de la expresi\u00f3n se cumple un determinado caso, es decir, seg\u00fan sea el valor de esa expresi\u00f3n se har\u00e1 un caso u otro. case expresion in 1 ) comandos ;; 2 ) comandos ;; * ) comandos ;; esac Ejemplo case $frase in a* ) echo \"La frase empieza con a\" ;; c*t ) echo \"La frase empieza con c y termina con t\" ;; *com ) echo \"La frase termina con la cadena com\" ;; * ) echo \"La frase no cumple con ninguna de las condiciones\" ;; esac for El bucle se ejecuta para cada uno de los valores que toma la variable en esa lista. for variable in v1 v2 ... vN do comando1 [ break | continue ] done Para modificar el comportamiento del bucle: Break : Rompe el bucle y no da m\u00e1s opci\u00f3n a que la variable se ejecute. Continue : Salta al siguiente valor de la lista. Ejemplo ciudades = \"Madrid Barcelona Granada \" for ciudad in $ciudades do if [[ \" $ciudad \" == 'Granada' ]] then echo \" Mi tierra es $ciudad !!! \" else echo \" $ciudad , no es mi tierra\" fi done while El while se estructura de la siguiente forma: while condicion do comandos done Ejemplo Ejemplo i = 100 while [ $i -lt 1000 ] do echo \"Hola soy Bart Simpson, Escribiendo en la pizarra la frase n\u00ba $i \" (( i++ )) done funciones En el \u00e1mbito de la programaci\u00f3n, una funci\u00f3n es un tipo de subalgoritmo, es el t\u00e9rmino para describir una secuencia de \u00f3rdenes que hacen una tarea espec\u00edfica de una aplicaci\u00f3n m\u00e1s grande. function nombreFuncion (){ comando1 comando2 } OPERACIONES expr es utilizado para realizar operaciones aritm\u00e9ticas, u operaciones con cadenas y un sinf\u00edn de cosas... expr operaci\u00f3n_a_evaluar Num\u00e9ricas Operaci\u00f3n Descripci\u00f3n expr num1 + num2 Devuelve la suma de num1 + num2 expr num1 - num2 Devuelve la resta de num1 - num2 expr num1 * num2 Devuelve el producto de num1 * num2 expr num1 / num2 Devuelve la divisi\u00f3n de num1 / num2 expr num1 >= num2 Devuelve 0(true) si num1 >= num2 expr num1 > num2 Devuelve 0(true) si num1 > num2 expr num1 <= num2 Devuelve 0(true) si num1 < num2 expr num1 < num2 Devuelve 0(true) si num1 < num2 expr num1 != num2 Devuelve 0(true) si num1 es distinto de num2 Cadenas Operaci\u00f3n Descripci\u00f3n expr length cadena N\u00famero de caracteres de esa cadena expr index cadena_donde_busca cadena_a_buscar Devuelve la posici\u00f3n donde encuentra los caracteres a buscar dentro de la cadena, si no, devuelve un 0 COMPROBACIONES Directorios Comprobaci\u00f3n Descripci\u00f3n -f /ruta/nombre Comprueba si es un fichero normal -l /ruta/nombre Comprueba si es un enlace suave -d /ruta/ Comprueba que existe el directorio -x /ruta/nombre Comprueba si es un ejecutable -u /ruta/nombre Comprueba si tiene activados los permisos suid -g /ruta/nombre Comprueba si tiene activados los permisos sgid -s /ruta/nombre Comprueba que su tama\u00f1o es mayor a 0 Cadenas Comprobaci\u00f3n Descripci\u00f3n \"cadena\" = = \"cadena2\" Comprueba si son iguales -z cadena Comprueba si est\u00e1 vac\u00eda \"cadena\" != \"cadena2\" Comprueba que son diferentes Num\u00e9ricas Comprobaci\u00f3n Descripci\u00f3n exp -eq exp2 Comprueba si son iguales exp -ge exp2 Comprueba si exp >= exp2 exp -ne exp2 Comprueba si exp distinto de exp2 exp -gt exp2 Comprueba si exp > exp2 exp -le exp2 Comprueba si exp <= exp2 exp -lt exp2 Comprueba si exp < exp2 L\u00f3gicas Comprobaci\u00f3n Descripci\u00f3n exp -o exp2 Operador l\u00f3gico or exp -a exp2 Operador l\u00f3gico and","title":"Script"},{"location":"script/#interprete","text":"En la primera l\u00ednea del script se debe indicar que shell que vas a usar ( /bin/bash/ , /usr/bin/perl , etc ) Aunque da igual la que uses lo importante es el contenido: #!/bin/bash #! Se conoce con el nombre de Sha Bang. Se denomina \"sha-bang\" a la secuencia #! con la que se inician los scripts. Su funci\u00f3n es indicarle al sistema que se trata de un conjunto de comandos para que sean interpretados. En realidad, es un n\u00famero m\u00e1gico de dos bytes. El n\u00famero m\u00e1gico es un marcador especial para indicar el tipo de archivo, en este caso, indica que se trata de un script de shell ejecutable. Para introducir comentarios se debe poner #. Por cada linea que dese\u00e9is poner un comentario, lo primero que debe tener es #. Es importante a\u00f1adir comentarios comentando la utilidad del script o las variables que se crean.","title":"INTERPRETE"},{"location":"script/#ejecutar","text":"Antes de poder ejecutarlo, debemos darle permisos de ejecuci\u00f3n. (+x) por ello, haremos uso del comando chmod y damos permisos de ejecuci\u00f3n, si se desea, se pueden dar a todos los usuarios y grupos. chmod 755 /ruta_del_script \u2192 Para el usuario propietario chmod 777 /ruta_del_script \u2192 Para cualquier usuario Una vez hecho todo lo anterior, usaremos: ./nombredelscript.sh","title":"Ejecutar"},{"location":"script/#variables","text":"Lo primero es saber c\u00f3mo dar valor a una variable. Es tan sencillo como poner: nombre_variable=valor Si deseas guardar la salida de un comando solo tienes que ponerlo entre tildes invertidas: nombre_variable= ` comando ` Tambien hay un comando que lee por teclado las variables ( read ). Para ponerlo es: read -p \"Introduce el nombre y los apellidos\" nombre apellidos Tiene un mont\u00f3n de opciones pero estas son las m\u00e1s importantes y usadas: Opci\u00f3n Descripci\u00f3n -p \"frase\" Muestra por pantalla una frase para saber que debes introducir -n num_car N\u00famero m\u00e1ximo de caracteres que puedes introducir por teclado Cuando queremos utilizar el valor de una variable en el c\u00f3digo, nos referiremos a \u00e9ste como: $nombre_variable Por lo tanto, si queremos mostrar el contenido de una variable podemos utilizar el comando echo echo $nombre_variable","title":"Variables"},{"location":"script/#parametros-posicionales","text":"Son valores que se le pasan al script desde la l\u00ednea de comandos cuando se ejecuta y se numeran en orden. Pero a partir del 10 hay que encerrarlo entre llaves, ej. ${11} ./script valor1 valor2 ... valorN Para trabajar con los par\u00e1metros necesitar saber: Descripci\u00f3n $NumParametro Ver el contenido del par\u00e1metro $* Contenido de todos los par\u00e1metros $# N\u00famero de par\u00e1metros","title":"Parametros posicionales"},{"location":"script/#estructuras-de-control","text":"","title":"ESTRUCTURAS DE CONTROL"},{"location":"script/#if","text":"La estructura b\u00e1sica de una condici\u00f3n ser\u00eda: if condici\u00f3n then comando1 else comando2 fi En caso de necesitar if anidados: if condici\u00f3n then comando1 elif condici\u00f3n then comando2 elif condici\u00f3n then fi Ejemplo if [ $edad -gt 18 ] then echo \"Eres mayor de edad\" else echo \"No eres mayor de edad\" fi","title":"if"},{"location":"script/#case","text":"funciona igual que los switch, esta estructura sirve para dependiendo de la expresi\u00f3n se cumple un determinado caso, es decir, seg\u00fan sea el valor de esa expresi\u00f3n se har\u00e1 un caso u otro. case expresion in 1 ) comandos ;; 2 ) comandos ;; * ) comandos ;; esac Ejemplo case $frase in a* ) echo \"La frase empieza con a\" ;; c*t ) echo \"La frase empieza con c y termina con t\" ;; *com ) echo \"La frase termina con la cadena com\" ;; * ) echo \"La frase no cumple con ninguna de las condiciones\" ;; esac","title":"case"},{"location":"script/#for","text":"El bucle se ejecuta para cada uno de los valores que toma la variable en esa lista. for variable in v1 v2 ... vN do comando1 [ break | continue ] done Para modificar el comportamiento del bucle: Break : Rompe el bucle y no da m\u00e1s opci\u00f3n a que la variable se ejecute. Continue : Salta al siguiente valor de la lista. Ejemplo ciudades = \"Madrid Barcelona Granada \" for ciudad in $ciudades do if [[ \" $ciudad \" == 'Granada' ]] then echo \" Mi tierra es $ciudad !!! \" else echo \" $ciudad , no es mi tierra\" fi done","title":"for"},{"location":"script/#while","text":"El while se estructura de la siguiente forma: while condicion do comandos done Ejemplo Ejemplo i = 100 while [ $i -lt 1000 ] do echo \"Hola soy Bart Simpson, Escribiendo en la pizarra la frase n\u00ba $i \" (( i++ )) done","title":"while"},{"location":"script/#funciones","text":"En el \u00e1mbito de la programaci\u00f3n, una funci\u00f3n es un tipo de subalgoritmo, es el t\u00e9rmino para describir una secuencia de \u00f3rdenes que hacen una tarea espec\u00edfica de una aplicaci\u00f3n m\u00e1s grande. function nombreFuncion (){ comando1 comando2 }","title":"funciones"},{"location":"script/#operaciones","text":"expr es utilizado para realizar operaciones aritm\u00e9ticas, u operaciones con cadenas y un sinf\u00edn de cosas... expr operaci\u00f3n_a_evaluar","title":"OPERACIONES"},{"location":"script/#numericas","text":"Operaci\u00f3n Descripci\u00f3n expr num1 + num2 Devuelve la suma de num1 + num2 expr num1 - num2 Devuelve la resta de num1 - num2 expr num1 * num2 Devuelve el producto de num1 * num2 expr num1 / num2 Devuelve la divisi\u00f3n de num1 / num2 expr num1 >= num2 Devuelve 0(true) si num1 >= num2 expr num1 > num2 Devuelve 0(true) si num1 > num2 expr num1 <= num2 Devuelve 0(true) si num1 < num2 expr num1 < num2 Devuelve 0(true) si num1 < num2 expr num1 != num2 Devuelve 0(true) si num1 es distinto de num2","title":"Num\u00e9ricas"},{"location":"script/#cadenas","text":"Operaci\u00f3n Descripci\u00f3n expr length cadena N\u00famero de caracteres de esa cadena expr index cadena_donde_busca cadena_a_buscar Devuelve la posici\u00f3n donde encuentra los caracteres a buscar dentro de la cadena, si no, devuelve un 0","title":"Cadenas"},{"location":"script/#comprobaciones","text":"","title":"COMPROBACIONES"},{"location":"script/#directorios","text":"Comprobaci\u00f3n Descripci\u00f3n -f /ruta/nombre Comprueba si es un fichero normal -l /ruta/nombre Comprueba si es un enlace suave -d /ruta/ Comprueba que existe el directorio -x /ruta/nombre Comprueba si es un ejecutable -u /ruta/nombre Comprueba si tiene activados los permisos suid -g /ruta/nombre Comprueba si tiene activados los permisos sgid -s /ruta/nombre Comprueba que su tama\u00f1o es mayor a 0","title":"Directorios"},{"location":"script/#cadenas_1","text":"Comprobaci\u00f3n Descripci\u00f3n \"cadena\" = = \"cadena2\" Comprueba si son iguales -z cadena Comprueba si est\u00e1 vac\u00eda \"cadena\" != \"cadena2\" Comprueba que son diferentes","title":"Cadenas"},{"location":"script/#numericas_1","text":"Comprobaci\u00f3n Descripci\u00f3n exp -eq exp2 Comprueba si son iguales exp -ge exp2 Comprueba si exp >= exp2 exp -ne exp2 Comprueba si exp distinto de exp2 exp -gt exp2 Comprueba si exp > exp2 exp -le exp2 Comprueba si exp <= exp2 exp -lt exp2 Comprueba si exp < exp2","title":"Num\u00e9ricas"},{"location":"script/#logicas","text":"Comprobaci\u00f3n Descripci\u00f3n exp -o exp2 Operador l\u00f3gico or exp -a exp2 Operador l\u00f3gico and","title":"L\u00f3gicas"}]}